#!/usr/bin/env node
var monitor = require('../');
var optimist = require('optimist');
var duration = require('parse-duration');
var cp = require('child_process');

var argv = optimist.argv;

if (argv.help || process.argv.length === 2) {
	console.log('Usage: http-monitor url [options...]');
	console.log('Options:');
	console.log('	--on-http-error "command..."       When there is a 4xx or 5xx response code');
	console.log('	--on-connection-error "command..." When there is a connection errror (no reply) from the server');
	console.log('	--on-error "command..."            When either a connection/http error occur');
	console.log('	--on-recovery "command..."         When the server recovers after a period with errors');
	console.log('	--interval 5min                    How often to check');
	console.log('	--retries 4                        How many times to retry');
	console.log('	--timeout 5s                       How long before claiming a timeout (causes a connection error)');
	console.log('	--allow 501                        Allow a 4xx or 5xx code which would otherwise cause an error');
	console.log('	--disallow 301                     Disallow a 1xx, 2xx, or 3xx code which wouldn\'t otherwise cause an error');
	console.log('	--once                             Only run once, then exit');
	return;
}

var url = argv._[0];
var once = argv.once;
var allowed = argv.allow || [];
var disallowed = argv.disallow || [];
var retries = argv.retries || 1;
var timeout = argv.timeout && duration(argv.timeout);
var interval = argv.interval && duration(argv.interval);
var onerror = argv['on-error'] || '';
var onconnectionerror = argv['on-connection-error'] || '';
var onhttperror = argv['on-http-error'] || '';
var onrecovery = argv['on-recovery'] || '';

var replace = function(str, url, statusCode, body) {
	return (str || '')
		.replace(/%url/ig, url)
		.replace(/%statuscode/ig, statusCode)
		.replace(/%body/ig, body)
};

var exec = function(err, stdout, stderr) {
	if (stdout) console.log(stdout);
	if (stderr) console.error(stderr);
	if (err) console.error(err);
};

if (once) {
	console.log('Settings');
	console.log('	URL:', url);
	console.log('	Interval:', interval);
	console.log('	Max retries:', retries);
	console.log('	Timeout:', timeout);
	console.log('	Allowed erronous status codes (4xx, 5xx):', allowed);
	console.log('	Disallowed succesful status codes (1xx, 2xx, 3xx):', disallowed);
	console.log('	On http error:', onhttperror);
	console.log('	On connection error:', onconnectionerror);
	console.log('	On (connection and http) error:', onerror);
	console.log('	On recovery:', onrecovery);
}
monitor(url, {
	once: once,
	allowed: allowed,
	disallowed: disallowed,
	interval: interval,
	retries: retries,
	timeout: timeout
}, function(err, statusCode, body) {
	if (!err && onrecovery) cp.exec(onrecovery, exec);
	if (!err) return;

	// connection error
	if (!statusCode && onconnectionerror) cp.exec(replace(onconnectionerror, url, statusCode, body), exec);
	if (!statusCode && onerror) cp.exec(replace(onerror, url, statusCode, body), exec);

	// http error
	if (statusCode && onhttperror) cp.exec(replace(onhttperror, url, statusCode, body), exec);
	if (statusCode && onerror) cp.exec(replace(onerror, url, statusCode, body), exec);
});
